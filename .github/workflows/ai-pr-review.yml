name: AI Release Notes

on:
  push:
    tags:
      - 'v*'             # runs on tag pushes like v0.1.0
  workflow_dispatch:      # or run manually from the Actions tab

permissions:
  contents: write

jobs:
  ai_notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute commit log
        id: log
        run: |
          # If it's a tag push, try to diff against the previous tag.
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            tag="${GITHUB_REF#refs/tags/}"
            echo "Tag push detected: $tag"
            # Fallback: if no prior tag, just use the last 50 commits
            prev=$(git describe --tags --abbrev=0 --exclude "$tag" 2>/dev/null || true)
            if [ -z "$prev" ]; then
              echo "No previous tag found; using last 50 commits."
              git log -n 50 --pretty=format:'- %s' > commit_log.txt
            else
              echo "Using commits since previous tag $prev"
              git log "$prev"..HEAD --pretty=format:'- %s' > commit_log.txt
            fi
          else
            echo "Not a tag push; using last 50 commits."
            git log -n 50 --pretty=format:'- %s' > commit_log.txt
          fi
          echo "Commit log lines: $(wc -l < commit_log.txt)"
          echo "------ commit_log.txt (first 50 lines) ------"
          sed -n '1,50p' commit_log.txt || true
          echo "--------------------------------------------"

      - name: Ensure jq is available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: AI Release Notes (OpenAI-compatible)
        env:
          MODEL_API_BASE: ${{ secrets.MODEL_API_BASE }}
          MODEL_API_KEY:  ${{ secrets.MODEL_API_KEY }}
          MODEL_NAME:     ${{ secrets.MODEL_NAME }}
        run: |
          set -euo pipefail

          if [ ! -s commit_log.txt ]; then
            echo "commit_log.txt is missing or empty; add commits or push a proper tag."
            exit 1
          fi

          # Build JSON payload safely using jq
          SYSTEM_MSG=$(jq -Rs '.' <<< "You turn commit messages into crisp, categorized release notes.")
          USER_MSG=$(jq -Rs '.' <<< "Create concise release notes grouped by Features, Fixes, Docs, and Chore from these commits/PR titles:\n$(cat commit_log.txt)")

          PAYLOAD=$(jq -n \
            --arg mdl "$MODEL_NAME" \
            --arg sys "$(jq -r <<<"$SYSTEM_MSG")" \
            --arg usr "$(jq -r <<<"$USER_MSG")" \
            '{
              model: $mdl,
              messages: [
                {role:"system", content: $sys},
                {role:"user",   content: $usr}
              ],
              temperature: 0.2,
              max_tokens: 600
            }')

          echo "Calling $MODEL_API_BASE/v1/chat/completions with model: $MODEL_NAME"
          RESP_BODY=$(mktemp)
          HTTP_CODE=$(curl -sS -o "$RESP_BODY" -w '%{http_code}' \
            "$MODEL_API_BASE/v1/chat/completions" \
            -H "Authorization: Bearer $MODEL_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD") || { echo "curl failed (network). Body:"; cat "$RESP_BODY" || true; exit 1; }

          echo "HTTP code: $HTTP_CODE"
          if [ "$HTTP_CODE" -ge 300 ]; then
            echo "Error response from model API:"
            cat "$RESP_BODY"
            exit 1
          fi

          CONTENT=$(jq -r '.choices[0].message.content // empty' < "$RESP_BODY")
          if [ -z "$CONTENT" ]; then
            echo "Model returned no content; full response was:"
            cat "$RESP_BODY"
            exit 1
          fi

          printf "%s\n" "$CONTENT" > RELEASE_NOTES.md
          echo "Wrote RELEASE_NOTES.md"

          {
            echo "### Release Notes Preview"
            echo
            echo "$CONTENT"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: RELEASE_NOTES
          path: RELEASE_NOTES.md
